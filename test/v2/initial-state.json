{
    "tasks": {
        "npm_test": {
            "do": "shell",
            "description": "Just run yarn test",
            "command": "sh -c \"cd web/ && yarn test\""
        },
        "mix_test": {
            "do": "shell",
            "description": "Just run mix test",
            "command": "sh -c \"cd api/ && mix test\""
        },
        "npm_test_w": {
            "do": "shell",
            "description": "Just run yarn test watch",
            "command": "sh -c \"cd web/ && yarn run test:unit:w\""
        },
        "hot_setup": {
            "description": "Takes a clean repo and pulls all dependencies",
            "do": "sequence",
            "actions": [
                {
                    "do": "shell",
                    "command": "echo 'Deprecated, please use $ usher run setup instead.'"
                }
            ]
        },
        "hot": {
            "do": "sequence",
            "actions": [
                {
                    "do": "setup_if_out_of_date"
                },
                {
                    "do": "global.network.check_for_vpn"
                },
                {
                    "do": "hot_min"
                }
            ]
        },
        "hot_min": {
            "do": "sequence",
            "actions": [
                {
                    "do": "global.docker.compose_down",
                    "service_folder": "docker-compose",
                    "compose_filename": "hot.yml",
                    "service_name": null,
                    "compose_down_args": "--remove-orphans",
                    "env": [
                        "COMPOSE_PROJECT_NAME=titanhotlocal"
                    ]
                },
                {
                    "do": "global.docker.compose_up_build",
                    "service_folder": "docker-compose",
                    "compose_filename": "hot.yml",
                    "service_name": null,
                    "env": [
                        "MIX_ENV=dev",
                        "COMPOSE_PROJECT_NAME=titanhotlocal",
                        "FEATURE_TOGGLE_CLIENT_KEY=57d7df2c5b36070e2d5eeeb9",
                        "SESSION_COOKIE_NAME=Localsession"
                    ]
                }
            ]
        },
        "setup_if_out_of_date": {
            "description": "Check that setup is current",
            "do": "sequence",
            "actions": [
                {
                    "do": "shell",
                    "command": "sh -c \"./scripts/setup-if-changed.sh <%=setup_version%>\""
                }
            ]
        },
        "hot_unit": {
            "description": "Run containers that watch for changes and rerun unit tests",
            "do": "sequence",
            "actions": [
                {
                    "do": "setup_if_out_of_date"
                },
                {
                    "do": "global.network.check_for_vpn"
                },
                {
                    "do": "hot_unit_min"
                }
            ]
        },
        "hot_unit_min": {
            "do": "sequence",
            "actions": [
                {
                    "do": "global.docker.compose_down",
                    "service_folder": "docker-compose",
                    "compose_filename": "watch.yml",
                    "service_name": null,
                    "compose_down_args": "--remove-orphans",
                    "env": [
                        "COMPOSE_PROJECT_NAME=titantestwatcher"
                    ]
                },
                {
                    "do": "global.docker.compose_up_build",
                    "service_folder": "docker-compose",
                    "compose_filename": "watch.yml",
                    "service_name": null,
                    "env": [
                        "COMPOSE_PROJECT_NAME=titantestwatcher"
                    ]
                }
            ]
        },
        "hot_teardown": {
            "description": "Brings all docker containers down and prunes stopped containers, dangling volumes, and dangling images",
            "do": "sequence",
            "actions": [
                {
                    "do": "global.docker.compose_down",
                    "service_folder": "docker-compose",
                    "compose_filename": "hot.yml",
                    "service_name": null,
                    "compose_down_args": "--remove-orphans --volumes --rmi local",
                    "env": [
                        "COMPOSE_PROJECT_NAME=titanhotlocal"
                    ]
                },
                {
                    "do": "global.docker.compose_down",
                    "service_folder": "docker-compose",
                    "compose_filename": "watch.yml",
                    "service_name": null,
                    "compose_down_args": "--remove-orphans --volumes --rmi local",
                    "env": [
                        "COMPOSE_PROJECT_NAME=titantestwatcher"
                    ]
                },
                {
                    "do": "global.docker.compose_down",
                    "service_folder": "docker-compose",
                    "compose_filename": "dev.yml",
                    "compose_down_args": "--remove-orphans --volumes --rmi local",
                    "service_name": null,
                    "env": [
                        "COMPOSE_PROJECT_NAME=titanlocal"
                    ]
                },
                {
                    "do": "shell",
                    "command": "docker system prune --force"
                }
            ]
        },
        "hot_acceptance": {
            "description": "Run acceptance tests locally",
            "do": "sequence",
            "actions": [
                {
                    "do": "setup_if_out_of_date"
                },
                {
                    "do": "global.network.check_for_vpn"
                },
                {
                    "do": "global.docker.compose_down",
                    "service_folder": "docker-compose",
                    "compose_filename": "hot.yml",
                    "service_name": null,
                    "compose_down_args": "-v --remove-orphans",
                    "env": [
                        "COMPOSE_PROJECT_NAME=titanhotlocal"
                    ]
                },
                {
                    "do": "shell",
                    "command": "docker-compose -f docker-compose/hot.yml -f docker-compose/acceptance.yml up --build",
                    "env": [
                        "FEATURE_TOGGLE_CLIENT_KEY=57d7df2c5b36070e2d5eeeb9",
                        "SESSION_COOKIE_NAME=Localsession",
                        "COMPOSE_PROJECT_NAME=titanhotlocal",
                        "MIX_ENV=dev"
                    ]
                }
            ]
        },
        "clean": {
            "description": "Clean your dev environment",
            "do": "sequence",
            "actions": [
                {
                    "do": "global.docker.compose_down",
                    "service_folder": "docker-compose",
                    "compose_filename": "hot.yml",
                    "service_name": null,
                    "compose_down_args": "-v --remove-orphans",
                    "env": [
                        "COMPOSE_PROJECT_NAME=titanhotlocal"
                    ]
                },
                {
                    "do": "global.docker.compose_down",
                    "service_folder": "docker-compose",
                    "compose_filename": "watch.yml",
                    "service_name": null,
                    "compose_down_args": "-v --remove-orphans",
                    "env": [
                        "COMPOSE_PROJECT_NAME=titantestwatcher"
                    ]
                }
            ]
        },
        "local": {
            "description": "Run container locally",
            "do": "sequence",
            "actions": [
                {
                    "do": "setup_if_out_of_date"
                },
                {
                    "do": "global.network.check_for_vpn"
                },
                {
                    "do": "local_clean"
                },
                {
                    "do": "build_minimal_and_emit_schema"
                },
                {
                    "do": "build",
                    "version": "local"
                },
                {
                    "do": "global.docker.compose_up_build",
                    "service_folder": "docker-compose",
                    "compose_filename": "dev.yml",
                    "service_name": null,
                    "env": [
                        "MIX_ENV=integration",
                        "NODE_ENV=production",
                        "COMPOSE_PROJECT_NAME=titanlocal",
                        "FEATURE_TOGGLE_CLIENT_KEY=57d7df2c5b36070e2d5eeeb9",
                        "SESSION_COOKIE_NAME=Integrationsession",
                        "VERSION=local"
                    ]
                }
            ]
        },
        "local_clean": {
            "description": "Clean your dev environment",
            "do": "sequence",
            "actions": [
                {
                    "do": "global.network.check_for_vpn"
                },
                {
                    "do": "global.docker.compose_down",
                    "service_folder": "docker-compose",
                    "compose_filename": "dev.yml",
                    "compose_down_args": "-v --remove-orphans",
                    "service_name": null,
                    "env": [
                        "COMPOSE_PROJECT_NAME=titanlocal"
                    ]
                }
            ]
        },
        "local_debug": {
            "do": "sequence",
            "actions": [
                {
                    "do": "setup_if_out_of_date"
                },
                {
                    "do": "global.network.check_for_vpn"
                },
                {
                    "do": "local_clean"
                },
                {
                    "do": "build_minimal_and_emit_schema"
                },
                {
                    "do": "build",
                    "version": "local"
                },
                {
                    "do": "shell",
                    "command": "docker-compose -f docker-compose/dev.yml up",
                    "env": [
                        "MIX_ENV=dev",
                        "NODE_ENV=development",
                        "COMPOSE_PROJECT_NAME=titanlocal",
                        "FEATURE_TOGGLE_CLIENT_KEY=57d7df2c5b36070e2d5eeeb9",
                        "SESSION_COOKIE_NAME=Localsession",
                        "VERSION=local"
                    ]
                }
            ]
        },
        "local_unit_template": {
            "description": "Run unit tests inside a container (with automatic build)",
            "do": "sequence",
            "actions": [
                {
                    "do": "build_minimal_and_emit_schema"
                },
                {
                    "do": "global.docker.compose_run",
                    "service_folder": "docker-compose",
                    "compose_filename": "minimal.yml",
                    "service_name": "web",
                    "service_args": "<%=npm_test_args%>",
                    "env": [
                        "COMPOSE_PROJECT_NAME=titanlocal"
                    ]
                },
                {
                    "do": "global.docker.compose_run",
                    "service_folder": "docker-compose",
                    "compose_filename": "minimal.yml",
                    "service_name": "api",
                    "service_args": "<%=mix_test_args%>",
                    "env": [
                        "COMPOSE_PROJECT_NAME=titanlocal"
                    ]
                }
            ]
        },
        "local_unit": {
            "description": "Run unit tests inside a container (with automatic build)",
            "do": "local_unit_template",
            "npm_test_args": "yarn test",
            "mix_test_args": "mix coveralls"
        },
        "local_unit_nocoverage": {
            "description": "Run unit tests inside a container (with automatic build)",
            "do": "local_unit_template",
            "npm_test_args": "yarn run test:nocov",
            "mix_test_args": "mix test"
        },
        "build": {
            "description": "Build the docker image",
            "do": "sequence",
            "actions": [
                {
                    "do": "global.docker.create_image",
                    "create_image_extra_args": null,
                    "service_folder": "./api",
                    "service_name": "<%=api_service_image_name%>",
                    "env": [
                        "MIX_ENV=prod"
                    ]
                },
                {
                    "do": "build_minimal_and_emit_schema"
                },
                {
                    "do": "global.docker.create_image",
                    "create_image_extra_args": null,
                    "service_folder": "./web",
                    "service_name": "<%=web_service_image_name%>"
                },
                {
                    "do": "global.docker.create_image",
                    "create_image_extra_args": null,
                    "service_folder": "./router",
                    "service_name": "<%=router_service_image_name%>"
                }
            ]
        },
        "build_lb": {
            "description": "Build the load-balancer docker image",
            "do": "global.docker.create_lb_image",
            "service_name": "<%=load_balancer_image_name%>",
            "service_folder": "./load-balancer"
        },
        "push": {
            "description": "Push the docker image to our registry",
            "do": "sequence",
            "actions": [
                {
                    "do": "global.docker.push_image",
                    "service_name": "<%=web_service_image_name%>"
                },
                {
                    "do": "global.docker.push_image",
                    "service_name": "<%=api_service_image_name%>"
                },
                {
                    "do": "global.docker.push_image",
                    "service_name": "<%=router_service_image_name%>"
                }
            ]
        },
        "push_lb": {
            "description": "Push the load-balancer docker image to our registry",
            "do": "global.docker.push_image",
            "service_name": "<%=load_balancer_image_name%>"
        },
        "pull": {
            "description": "Pull the docker image from the registry (to add it to the local cache)",
            "do": "sequence",
            "actions": [
                {
                    "do": "global.docker.pull_image",
                    "service_name": "<%=web_service_image_name%>"
                },
                {
                    "do": "global.docker.pull_image",
                    "service_name": "<%=api_service_image_name%>"
                }
            ]
        },
        "pull_lb": {
            "description": "Pull the load-balancer docker image from the registry (to add it to the local cache)",
            "do": "global.docker.pull_image",
            "service_name": "<%=load_balancer_image_name%>"
        },
        "unit_test_teamcity": {
            "description": "Run unit tests inside a container (with automatic build)",
            "do": "sequence",
            "actions": [
                {
                    "do": "global.domesday.get_password",
                    "service_name": "<%=service_image_name%>",
                    "vault_username": "<%=tc_username%>",
                    "vault_password": "<%=tc_password%>",
                    "service_tag": "black-dev",
                    "options": {
                        "register": "app_password"
                    }
                },
                {
                    "do": "sniff",
                    "service_tag": "black-dev"
                },
                {
                    "do": "shell",
                    "command": "docker-compose -f docker-compose/minimal.yml down --remove-orphans",
                    "options": {
                        "ignore_errors": true
                    },
                    "env": [
                        "COMPOSE_PROJECT_NAME=titanlocal"
                    ]
                },
                {
                    "do": "build_minimal_and_emit_schema"
                },
                {
                    "do": "shell",
                    "command": "docker-compose -f docker-compose/minimal.yml run --rm web yarn run test:teamcity",
                    "env": [
                        "NODE_ENV=test",
                        "COMPOSE_PROJECT_NAME=titanlocal"
                    ]
                },
                {
                    "do": "shell",
                    "command": "docker-compose -f docker-compose/minimal.yml run --rm api sh -c \"mix coveralls\"",
                    "env": [
                        "MIX_ENV=test",
                        "COMPOSE_PROJECT_NAME=titanlocal",
                        "TEAMCITY=yes"
                    ]
                }
            ]
        },
        "deploy": {
            "description": "Deploy container to node",
            "do": "sequence",
            "actions": [
                {
                    "do": "shell",
                    "command": "docker pull <%=registry%>/findmypast/<%=web_service_image_name%>:<%=version%>",
                    "env": [
                        "DOCKER_TLS_VERIFY=1",
                        "DOCKER_HOST=tcp://<%=service_node%>.dun.fh:2376",
                        "SERVICE_NAME=<%=service_image_name%>",
                        "SERVICE_TAGS=<%=service_tag%>",
                        "SERVICE_NODE=<%=service_node%>",
                        "COMPOSE_PROJECT_NAME=<%=base_service_name%><%=service_tag%>",
                        "VERSION=<%=version%>",
                        "MIX_ENV=<%=mix_env%>",
                        "NODE_ENV=production",
                        "FEATURE_TOGGLE_CLIENT_KEY=<%=feature_toggle_client_key%>",
                        "SESSION_COOKIE_NAME=<%=session_cookie_name%>",
                        "DISABLE_SSR=<%=disable_ssr%>",
                        "VAULT_PASS=<%=app_password%>"
                    ]
                },
                {
                    "do": "shell",
                    "command": "docker pull <%=registry%>/findmypast/<%=api_service_image_name%>:<%=version%>",
                    "env": [
                        "DOCKER_TLS_VERIFY=1",
                        "DOCKER_HOST=tcp://<%=service_node%>.dun.fh:2376",
                        "SERVICE_NAME=<%=service_image_name%>",
                        "SERVICE_TAGS=<%=service_tag%>",
                        "SERVICE_NODE=<%=service_node%>",
                        "COMPOSE_PROJECT_NAME=<%=base_service_name%><%=service_tag%>",
                        "VERSION=<%=version%>",
                        "MIX_ENV=<%=mix_env%>",
                        "NODE_ENV=production",
                        "FEATURE_TOGGLE_CLIENT_KEY=<%=feature_toggle_client_key%>",
                        "SESSION_COOKIE_NAME=<%=session_cookie_name%>",
                        "DISABLE_SSR=<%=disable_ssr%>",
                        "VAULT_PASS=<%=app_password%>"
                    ]
                },
                {
                    "description": "Remove those containers (if any)",
                    "do": "shell",
                    "command": "docker-compose -f docker-compose/production.yml -f docker-compose/production-<%=colour%>.yml down -v --remove-orphans",
                    "env": [
                        "DOCKER_TLS_VERIFY=1",
                        "DOCKER_HOST=tcp://<%=service_node%>.dun.fh:2376",
                        "SERVICE_NAME=<%=service_image_name%>",
                        "SERVICE_TAGS=<%=service_tag%>",
                        "SERVICE_NODE=<%=service_node%>",
                        "COMPOSE_PROJECT_NAME=<%=base_service_name%><%=service_tag%>",
                        "VERSION=<%=version%>",
                        "MIX_ENV=<%=mix_env%>",
                        "NODE_ENV=production",
                        "FEATURE_TOGGLE_CLIENT_KEY=<%=feature_toggle_client_key%>",
                        "SESSION_COOKIE_NAME=<%=session_cookie_name%>",
                        "DISABLE_SSR=<%=disable_ssr%>",
                        "VAULT_PASS=<%=app_password%>"
                    ]
                },
                {
                    "do": "shell",
                    "command": "sleep 5"
                },
                {
                    "description": "Run container (for correct colour tag) on host",
                    "do": "shell",
                    "command": "docker-compose -f docker-compose/production.yml -f docker-compose/production-<%=colour%>.yml up -d",
                    "env": [
                        "DOCKER_TLS_VERIFY=1",
                        "DOCKER_HOST=tcp://<%=service_node%>.dun.fh:2376",
                        "SERVICE_NAME=<%=service_image_name%>",
                        "SERVICE_TAGS=<%=service_tag%>",
                        "SERVICE_NODE=<%=service_node%>",
                        "COMPOSE_PROJECT_NAME=<%=base_service_name%><%=service_tag%>",
                        "VERSION=<%=version%>",
                        "MIX_ENV=<%=mix_env%>",
                        "NODE_ENV=production",
                        "FEATURE_TOGGLE_CLIENT_KEY=<%=feature_toggle_client_key%>",
                        "SESSION_COOKIE_NAME=<%=session_cookie_name%>",
                        "DISABLE_SSR=<%=disable_ssr%>",
                        "VAULT_PASS=<%=app_password%>"
                    ]
                }
            ]
        },
        "sniff": {
            "description": "Error when launch darkly feature flags are unused",
            "do": "global.toggle-nose.sniff",
            "projkey": "fmp",
            "environment": "production",
            "warnage": 7,
            "maxage": 31,
            "vault_username": "<%=service_image_name%>-<%=service_tag%>",
            "vault_password": "<%=app_password%>",
            "slack_channel": "titan",
            "finally_task": "build"
        },
        "deploy_testing": {
            "description": "Deploy testing environment",
            "do": "sequence",
            "actions": [
                {
                    "do": "configure_toggles",
                    "environment": "integration",
                    "flipper_host": "flipper.integration.service.dun.fh"
                },
                {
                    "description": "Deploy integration and acceptance in parallel",
                    "do": "sequence",
                    "actions": [
                        {
                            "do": "deploy_acceptance"
                        },
                        {
                            "do": "deploy_integration"
                        },
                        {
                            "do": "acceptance_tests"
                        }
                    ]
                }
            ]
        },
        "deploy_acceptance": {
            "description": "Deploy Acceptance container",
            "do": "global.deploy_k8s.deploy",
            "feature_toggle_client_key": "57f4f0e52b886c132878bf77",
            "mix_env": "integration",
            "session_cookie_name": "Acceptancesession",
            "disable_ssr": false,
            "environment": "integration",
            "helm_overrides": [
                {
                    "environment": "integration",
                    "image.tag": "<%=version%>"
                }
            ]
        },
        "deploy_integration": {
            "description": "Deploy Integration container",
            "do": "global.deploy_k8s.deploy",
            "feature_toggle_client_key": "57f4f0e52b886c132878bf77",
            "mix_env": "integration",
            "session_cookie_name": "Integrationsession",
            "disable_ssr": false,
            "environment": "integration",
            "helm_overrides": [
                {
                    "environment": "integration",
                    "image.tag": "<%=version%>"
                }
            ]
        },
        "deploy_production": {
            "do": "sequence",
            "environment": "production",
            "actions": [
                {
                    "do": "global.deploy_k8s.deploy",
                    "feature_toggle_client_key": "577cda73711b1406ea0013c1",
                    "session_cookie_name": "Livesession",
                    "disable_ssr": false,
                    "environment": "production",
                    "helm_overrides": [
                        {
                            "environment": "production",
                            "image.tag": "<%=version%>"
                        }
                    ]
                },
                {
                    "do": "configure_toggles",
                    "flipper_host": "flipper.production.service.dun.fh"
                }
            ]
        },
        "acceptance_tests": {
            "description": "Run the acceptance tests",
            "environment": "integration",
            "do": "sequence",
            "actions": [
                {
                    "description": "Get current working directory",
                    "do": "shell",
                    "command": "pwd",
                    "options": {
                        "register": "cwd"
                    }
                },
                {
                    "description": "Remove UI tests artifact folder",
                    "do": "shell",
                    "command": "rm -rf <%=cwd%>/ui_artifacts",
                    "options": [
                        {
                            "ignore_errors": true
                        }
                    ]
                },
                {
                    "description": "Create UI tests artifact folder",
                    "do": "shell",
                    "command": "mkdir <%=cwd%>/ui_artifacts"
                },
                {
                    "description": "Run UI tests with our Selenium grid",
                    "do": "shell",
                    "command": "docker-compose -f docker-compose/production-ui-tests.yml run --rm --no-deps -e TEST_URL=<%=base_service_name%>.acceptance.service.dun.fh worker_1 yarn run test:acceptance",
                    "env": [
                        "SERVICE_NODE=",
                        "NODE_ENV=test",
                        "VERSION=<%=version%>",
                        "COMPOSE_PROJECT_NAME=titanlocaltest_<%=colour%>",
                        "ARTIFACTS_PATH=<%=cwd%>/ui_artifacts"
                    ]
                }
            ]
        },
        "local_load_balancer": {
            "do": "global.docker.compose_up_build",
            "compose_filename": "load-balancer/docker-compose.yml",
            "service_name": "proxy",
            "consul_tag_path": "subdomains/integration",
            "load_balancer_name": "<%=load_balancer_image_name%>",
            "service_folder": ".",
            "env": [
                "SERVICE_NODE=consul",
                "IMAGE_LB=<%=registry%>/findmypast/<%=load_balancer_image_name%>:<%=version%>",
                "CONSUL_TAG_PATH=<%=consul_tag_path%>",
                "COMPOSE_PROJECT_NAME=<%=base_service_name%>"
            ]
        },
        "build_minimal_and_emit_schema": {
            "description": "Extracts the Absinthe schema from API in JSON format",
            "do": "sequence",
            "actions": [
                {
                    "do": "global.docker.compose_build",
                    "service_folder": "docker-compose",
                    "compose_filename": "minimal.yml",
                    "service_name": null,
                    "env": [
                        "COMPOSE_PROJECT_NAME=titanlocal"
                    ]
                },
                {
                    "do": "shell",
                    "command": "docker-compose -f docker-compose/minimal.yml run --rm api mix absinthe.schema.json --schema TitanApi.GraphQL.Schema /usr/src/app/_artifacts/schema.json",
                    "env": [
                        "COMPOSE_PROJECT_NAME=titanlocal"
                    ]
                },
                {
                    "do": "shell",
                    "command": "cp ./_artifacts/schema.json ./web/config/relay/data/schema.json"
                }
            ]
        },
        "configure_alerts": {
            "description": "Submit alerts",
            "do": "global.consul.create_key_value_pairs",
            "consul_host": "consul.dun.fh",
            "root": "proxied-services/titan/alerts",
            "service_folder": "config",
            "config_filepath": "alerts.yml"
        },
        "configure_toggles": {
            "description": "Submit latest version of toggle file",
            "do": "global.flipper.upload_toggles",
            "toggle_file_path": "config/toggles.json",
            "toggle_project_name": "fmp",
            "options": {
                "ignore_errors": true
            }
        },
        "configure_proxy": {
            "description": "Submit service.consul information",
            "do": "shell",
            "command": "curtain-twitcher consul.dun.fh proxied-services config/proxy.yml"
        },
        "pre_push": {
            "description": "Running pre push tasks",
            "do": "sequence",
            "actions": [
                {
                    "do": "shell",
                    "command": "git push --dry-run --no-verify"
                },
                {
                    "do": "local_unit"
                }
            ]
        },
        "pre_commit": {
            "description": "Running pre commit tasks",
            "do": "shell",
            "command": "echo \"committing...\""
        },
        "pre-commit": {
            "description": "DEPRECATED",
            "do": "shell",
            "command": "echo \"committing...\""
        },
        "setup": {
            "description": "Setup your local environment",
            "do": "sequence",
            "actions": [
                {
                    "do": "install_git_hooks"
                },
                {
                    "do": "install_git_project_settings"
                },
                {
                    "do": "global.network.check_for_vpn"
                },
                {
                    "do": "upgrade_tools"
                },
                {
                    "do": "build_minimal_and_emit_schema"
                },
                {
                    "do": "shell",
                    "command": "sh -c \"echo <%=setup_version%> > .setup_version\""
                }
            ]
        },
        "upgrade_tools": {
            "description": "check tools are at the latest.",
            "do": "sequence",
            "actions": [
                {
                    "do": "shell",
                    "command": "echo Installing Yarn. If this fails, install Yarn manually for your OS."
                },
                {
                    "do": "shell",
                    "command": "sh -c 'scripts/install-and-update-npm-tool.sh yarn || true'"
                },
                {
                    "do": "shell",
                    "command": "sh -c 'scripts/install-and-update-npm-tool.sh verzasca || true'"
                },
                {
                    "do": "shell",
                    "command": "sh -c 'scripts/install-and-update-npm-tool.sh turingsnip || true'"
                }
            ]
        },
        "install_git_project_settings": {
            "description": "git specific settings for this project.",
            "do": "shell",
            "command": "git config pull.rebase true"
        },
        "install_git_hooks": {
            "description": "Install pre-push shell file",
            "do": "sequence",
            "actions": [
                {
                    "do": "shell",
                    "command": "cp scripts/pre-push .git/hooks"
                },
                {
                    "description": "Change the permissions",
                    "do": "shell",
                    "command": "chmod +x .git/hooks/pre-push"
                }
            ]
        },
        "install_experimental_git_hooks": {
            "description": "Install experimental pre-push shell file",
            "do": "sequence",
            "actions": [
                {
                    "do": "shell",
                    "command": "cp scripts/pre-push-next .git/hooks/pre-push"
                },
                {
                    "description": "Change the permissions",
                    "do": "shell",
                    "command": "chmod +x .git/hooks/pre-push"
                }
            ]
        },
        "commits_with_tickets_opt_in": {
            "description": "Install commit-msg shell file",
            "do": "sequence",
            "actions": [
                {
                    "do": "shell",
                    "command": "cp scripts/commit-msg .git/hooks"
                },
                {
                    "description": "Change the permissions",
                    "do": "shell",
                    "command": "chmod +x .git/hooks/commit-msg"
                }
            ]
        },
        "global": {
            "tasks": {
                "docker": {
                    "tasks": {
                        "publish_docker_image": {
                            "description": "Build and publish the docker image to the internal repository",
                            "do": "sequence",
                            "actions": [
                                {
                                    "do": "create_image"
                                },
                                {
                                    "do": "push_image"
                                }
                            ]
                        },
                        "create_image": {
                            "description": "Build the docker image",
                            "do": "shell",
                            "command": "<%=command_prefix%> docker build --force-rm <%=create_image_extra_args%> -t <%=registry%>/findmypast/<%=service_name%>:<%=version%> <%=service_folder%>"
                        },
                        "create_lb_image": {
                            "description": "Build the docker image for the load balancer",
                            "do": "sequence",
                            "actions": [
                                {
                                    "do": "pull_image",
                                    "service_name": "service-discovery-lb",
                                    "version": "master"
                                },
                                {
                                    "do": "shell",
                                    "command": "<%=command_prefix%> docker build --force-rm <%=create_image_extra_args%> -t <%=registry%>/findmypast/<%=service_name%>:<%=version%> <%=service_folder%>"
                                }
                            ]
                        },
                        "push_image": {
                            "description": "Push the docker image to our internal repository",
                            "do": "shell",
                            "command": "<%=command_prefix%> docker push <%=registry%>/findmypast/<%=service_name%>:<%=version%>"
                        },
                        "pull_image": {
                            "description": "Pull the docker image from the registry",
                            "do": "shell",
                            "command": "docker pull <%=registry%>/findmypast/<%=service_name%>:<%=version%>"
                        },
                        "pull_images": {
                            "description": "Pull the docker images from the registry",
                            "do": "for",
                            "every": "service_name",
                            "in": "<%=image_names%>",
                            "exec": "pull_image"
                        },
                        "compose_up": {
                            "description": "Bring up the system using docker compose UP",
                            "do": "shell",
                            "command": "docker-compose -f <%=service_folder%>/<%=compose_filename%> <%=compose_extra_args%> up"
                        },
                        "compose_up_build": {
                            "description": "Bring up the system using docker compose UP",
                            "do": "shell",
                            "command": "docker-compose -f <%=service_folder%>/<%=compose_filename%> <%=compose_extra_args%> up --build <%=service_name%>"
                        },
                        "compose_up_detached": {
                            "description": "Bring up the system using docker compose UP",
                            "do": "shell",
                            "command": "docker-compose -f <%=service_folder%>/<%=compose_filename%> <%=compose_extra_args%> up -d <%=service_args%>"
                        },
                        "compose_down": {
                            "description": "Bring down the system using docker compose",
                            "do": "shell",
                            "command": "docker-compose -f <%=service_folder%>/<%=compose_filename%> <%=compose_extra_args%> down <%=compose_down_args%>"
                        },
                        "compose_build": {
                            "description": "Build the system using docker compose",
                            "do": "shell",
                            "command": "docker-compose -f <%=service_folder%>/<%=compose_filename%> <%=compose_extra_args%> build <%=service_name%>"
                        },
                        "compose_build_no_cache": {
                            "description": "Build the system using docker compose with no cache",
                            "do": "shell",
                            "command": "docker-compose -f <%=service_folder%>/<%=compose_filename%> <%=compose_extra_args%> build --no-cache <%=service_name%>"
                        },
                        "compose_run": {
                            "description": "Bring up the system using docker compose RUN",
                            "do": "shell",
                            "command": "docker-compose -f <%=service_folder%>/<%=compose_filename%> <%=compose_extra_args%> run --rm <%=service_name%> <%=service_args%>"
                        },
                        "kill_containers": {
                            "description": "Kill and remove any active containers",
                            "do": "sequence",
                            "actions": [
                                {
                                    "do": "shell",
                                    "command": "docker-compose -f docker-compose/<%=target_env%>.yml <%=compose_extra_args%> stop"
                                },
                                {
                                    "do": "shell",
                                    "command": "docker-compose -f docker-compose/<%=target_env%>.yml <%=compose_extra_args%> rm -f --all"
                                }
                            ]
                        }
                    }
                },
                "deploy": {
                    "tasks": {
                        "deploy_container": {
                            "description": "Deploys the specified image, shutting down any existing container(s)",
                            "do": "sequence",
                            "actions": [
                                {
                                    "do": "global.docker.pull_images",
                                    "env": "<%=docker_environment%>",
                                    "image_names": [
                                        "<%=service_name%>"
                                    ]
                                },
                                {
                                    "do": "global.docker.compose_down",
                                    "env": "<%=docker_environment%>"
                                },
                                {
                                    "do": "global.docker.compose_up_detached",
                                    "env": "<%=docker_environment%>"
                                }
                            ]
                        },
                        "deploy_blue_green": {
                            "description": "Performs a blue-green deployment of a Docker image",
                            "do": "sequence",
                            "blue_tag": "blue-<%=environment%>",
                            "green_tag": "green-<%=environment%>",
                            "actions": [
                                {
                                    "do": "shell",
                                    "description": "Check which colour is currently active",
                                    "command": "twoface peek -H <%=consul_host%>:<%=consul_port%> -k proxied-services/<%=service_name%>/<%=service_key_path%> -b <%=blue_tag%> -g <%=green_tag%>",
                                    "options": {
                                        "register": "service_tag"
                                    }
                                },
                                {
                                    "do": "shell",
                                    "command": "domesday userpass http://<%=tc_username%>:<%=tc_password%>@production.vault.service.consul:8200 <%=service_name%>-<%=service_tag%> application",
                                    "options": {
                                        "register": "app_password"
                                    }
                                },
                                {
                                    "do": "for",
                                    "every": "service_node",
                                    "in": "<%=deploy_hosts%>",
                                    "exec": "deploy_container",
                                    "mix_env": "<%=mix_environ%>",
                                    "compose_filename": "<%=service_folder%>/docker-compose/production.yml"
                                },
                                {
                                    "do": "graylog_link"
                                },
                                {
                                    "do": "shell",
                                    "description": "Run smoke tests against the service to confirm it's online",
                                    "command": "shisha --domain=backstage-<%=environment%>.<%=base_service_name%>.<%=service_domain%>:<%=smoke_port%>",
                                    "options": {
                                        "retry": {
                                            "retries": 30,
                                            "factor": 1.2
                                        }
                                    }
                                },
                                {
                                    "do": "shell",
                                    "description": "Flip the currently active colour",
                                    "command": "twoface flip -H <%=consul_host%>:<%=consul_port%> -k proxied-services/<%=service_name%>/<%=service_key_path%> -b <%=blue_tag%> -g <%=green_tag%>"
                                },
                                {
                                    "do": "it_lives",
                                    "options": {
                                        "retry": {
                                            "retries": 10,
                                            "factor": 1.2
                                        }
                                    }
                                }
                            ]
                        },
                        "cleanup_deployed_containers": {
                            "description": "tears down specified containers. Intended to run on deployment failure.",
                            "do": "for",
                            "every": "service_node",
                            "in": "<%=deploy_hosts%>",
                            "exec": "global.docker.compose_down",
                            "compose_filename": "<%=service_folder%>/docker-compose/production.yml"
                        },
                        "deploy_blue_green_with_cleanup": {
                            "description": "temp task to test cleanup. Will hopefully be merged with deploy_blue_green",
                            "do": "deploy_blue_green",
                            "catch_task": "global.deploy.cleanup_deployed_containers"
                        },
                        "deploy_load_balancer": {
                            "description": "Deploy the service load balancer to deployment server(s)",
                            "do": "sequence",
                            "actions": [
                                {
                                    "do": "for",
                                    "every": "service_node",
                                    "in": "<%=deploy_hosts%>",
                                    "exec": "generic_deploy_load_balancer",
                                    "service_tag": "<%=environment%>,backstage-<%=environment%>",
                                    "consul_tag_path": "<%=consul_key_path%>",
                                    "blue_tag": "blue-<%=environment%>",
                                    "green_tag": "green-<%=environment%>",
                                    "options": {
                                        "sequential": true
                                    }
                                },
                                {
                                    "do": "shell",
                                    "command": "curl -X GET http://<%=environment%>.<%=base_service_name%>.<%=service_domain%>:<%=smoke_port%>/lb/_health",
                                    "options": {
                                        "retry": {
                                            "retries": 30,
                                            "factor": 1.2
                                        }
                                    }
                                }
                            ]
                        },
                        "generic_deploy_load_balancer": {
                            "description": "Generic task to deploy the load balancer of this service",
                            "do": "sequence",
                            "actions": [
                                {
                                    "do": "global.docker.pull_image",
                                    "service_name": "<%=load_balancer_name%>",
                                    "env": "<%=lb_docker_environment%>"
                                },
                                {
                                    "do": "global.docker.compose_down",
                                    "compose_filename": "./load-balancer/<%=docker_compose_filename%>",
                                    "env": "<%=lb_docker_environment%>"
                                },
                                {
                                    "do": "global.docker.compose_up_detached",
                                    "compose_filename": "./load-balancer/<%=docker_compose_filename%>",
                                    "env": "<%=lb_docker_environment%>"
                                },
                                {
                                    "do": "shell",
                                    "command": "curl -X GET http://<%=service_node%>.dun.fh:<%=smoke_port%>/lb/_health",
                                    "options": {
                                        "retry": {
                                            "retries": 30,
                                            "factor": 1.2
                                        }
                                    }
                                },
                                {
                                    "do": "shell",
                                    "command": "curl -X GET \"http://consul.<%=service_domain%>:8500/v1/health/service/<%=base_service_name%>?tag=<%=environment%>&passing\" | grep <%=service_node%>",
                                    "options": {
                                        "retry": {
                                            "retries": 30,
                                            "factor": 1.2
                                        }
                                    }
                                }
                            ]
                        },
                        "it_lives": {
                            "description": "Wait until the live colour is being served via the load balancer",
                            "do": "assert_tag_is_live"
                        },
                        "assert_tag_is_live": {
                            "description": "Check if a load balancer is a currently serving the correct live colour",
                            "do": "sequence",
                            "actions": [
                                {
                                    "do": "shell",
                                    "command": "curl -XGET http://<%=environment%>.<%=base_service_name%>.<%=service_domain%>:<%=smoke_port%>/lb/_live_tag",
                                    "options": {
                                        "register": "live_tag"
                                    }
                                },
                                {
                                    "do": "shell",
                                    "command": "test \"<%=live_tag%>\" = \"<%=service_tag%>\""
                                }
                            ]
                        },
                        "graylog_link": {
                            "description": "Provide a link for the last half an hour of logging from <%=base_service_name%>",
                            "do": "sequence",
                            "actions": [
                                {
                                    "do": "shell",
                                    "command": "curl -XGET http://<%=consul_host%>:<%=consul_port%>/v1/kv/proxied-services/<%=service_name%>/<%=service_key_path%>?raw=true | grep -oP \".*(?=-)\"",
                                    "options": {
                                        "register": "live_colour"
                                    }
                                },
                                {
                                    "do": "shell",
                                    "command": "echo 'Graylog trace for this deploy --> http://graylog.dun.fh:9000/search?rangetype=relative&fields=source%2Ccontainer_name%2Cfacility%2Cimage_name%2Cmessage&width=1855&highlightMessage=&relative=1800&q=container_name%3A<%=base_service_name%><%=live_colour%>*+OR+container_name%3A<%=base_service_name%>*proxy*'"
                                }
                            ]
                        }
                    }
                },
                "dasher": {
                    "tasks": {
                        "publish_dashboard": {
                            "description": "Publish the latest dashboards config to the santa api",
                            "do": "shell",
                            "command": "curl -X PUT -F file=@<%=service_folder%>/<%=config_filepath%> <%=santa_environment%>.santa.service.consul:3334/<%=service_name%>"
                        },
                        "delete_dashboard": {
                            "description": "Delete the project's dashboards",
                            "do": "shell",
                            "command": "curl -X DELETE <%=santa_environment%>.santa.service.consul:3334/<%=service_name%>"
                        }
                    }
                },
                "consul": {
                    "tasks": {
                        "create_key_value_pairs": {
                            "description": "Configure consul with a set of Key/Value pairs",
                            "do": "shell",
                            "command": "curtain-twitcher <%=consul_host%> <%=root%> <%=service_folder%>/<%=config_filepath%>"
                        },
                        "remove_key_value_folder": {
                            "description": "Remove a folder from the KV store",
                            "do": "shell",
                            "command": "curl -XDELETE --silent \"<%=consul_host%>:<%=consul_port%>/v1/kv/<%=root%>/<%=service_folder%>/?recurse\""
                        },
                        "get_service_port": {
                            "description": "Return the current port for the service name and service colour/environment (service tag)",
                            "do": "shell",
                            "command": "port=$(curl -XGET --silent \"<%=consul_host%>:<%=consul_port%>/v1/catalog/service/<%=service_name%>?tag=<%=service_tag%>\" | cat | sed -E 's/^.*\"ServicePort\":([0-9]+).*$/\\1/') && if [ $port = \"[]\" ]; then exit 1; else echo $port; fi",
                            "options": {
                                "retry": {
                                    "retries": 30,
                                    "factor": 1.5
                                }
                            }
                        }
                    }
                },
                "domesday": {
                    "tasks": {
                        "get_password": {
                            "description": "Configures the application username and password in Vault and returns the password",
                            "do": "shell",
                            "command": "domesday userpass http://<%=vault_username%>:<%=vault_password%>@active.vault.service.consul:8200 <%=service_name%>-<%=service_tag%> application"
                        },
                        "add_key_value": {
                            "description": "Add a secret to the vault with a Github token as credentials",
                            "do": "shell",
                            "command": "domesday add-key-value http://active.vault.service.consul:8200 <%=key%> '<%=value%>' --token <%=token%>"
                        },
                        "read_key_value": {
                            "description": "Read a secret from the vault with a Github token as credentials",
                            "do": "shell",
                            "command": "domesday read-key-value http://active.vault.service.consul:8200 <%=key%> --token <%=token%>"
                        },
                        "add_key_value_auth": {
                            "description": "Add a secret to the vault with a usernamre and password as credentials",
                            "do": "shell",
                            "command": "domesday add-key-value http://<%=vault_username%>:<%=vault_password%>@active.vault.service.consul:8200 <%=key%> '<%=value%>'"
                        },
                        "read_key_value_auth": {
                            "description": "Read a secret from the vault with a usernamre and password as credentials",
                            "do": "shell",
                            "command": "domesday read-key-value http://<%=vault_username%>:<%=vault_password%>@active.vault.service.consul:8200 <%=key%>"
                        }
                    }
                },
                "network": {
                    "tasks": {
                        "check_for_vpn": {
                            "description": "Check for VPN availability",
                            "do": "sequence",
                            "actions": [
                                {
                                    "do": "shell",
                                    "command": "echo Check for VPN availability"
                                },
                                {
                                    "do": "shell",
                                    "command": "ping -c 1 production.vault.service.consul"
                                }
                            ]
                        }
                    }
                },
                "toggle-nose": {
                    "tasks": {
                        "sniff": {
                            "description": "Error when launch darkly feature toggles are unused",
                            "do": "shell",
                            "command": "toggle-nose sniff -k <%=projkey%> -e <%=environment%> -w <%=warnage%> -a <%=maxage%> -u <%=vault_username%> -p <%=vault_password%> -s <%=slack_channel%> <%=extra_args%>"
                        }
                    }
                },
                "flipper": {
                    "tasks": {
                        "upload_toggles": {
                            "description": "Uploads the latest version of a toggle file to flipper",
                            "do": "shell",
                            "command": "curl -f -X PUT -H 'Content-Type:application/json' -d @<%=toggle_file_path%> <%=flipper_host%>/api/<%=toggle_project_name%>/<%=environment%>"
                        }
                    }
                }
            }
        }
    },
    "setup_version": 1,
    "colour": "<%=_.head(_.split(service_tag, '-'))%>",
    "registry": "fh1-harbor01.dun.fh",
    "base_service_name": "titan",
    "consul_host": "consul.dun.fh",
    "consul_port": 8500,
    "mix_env": "prod",
    "service_image_name": "<%=base_service_name%>-app",
    "web_service_image_name": "<%=base_service_name%>-web",
    "api_service_image_name": "<%=base_service_name%>-api",
    "router_service_image_name": "<%=base_service_name%>-router",
    "load_balancer_image_name": "<%=base_service_name%>-lb",
    "acceptance_hosts": [
        "fh1-titant02"
    ],
    "integration_hosts": [
        "fh1-titant01"
    ],
    "production_hosts": [
        "fh1-titan01",
        "fh1-titan02",
        "fh1-titan03",
        "fh1-titan04",
        "fh1-titan05",
        "fh1-titan06",
        "fh1-titan07",
        "fh1-titan08",
        "fh1-titan09",
        "fh1-titan10",
        "fh1-titan11",
        "fh1-titan12"
    ],
    "production_lb_hosts": [
        "fh1-titan02"
    ],
    "docker_environment": [
        "DOCKER_TLS_VERIFY=1",
        "DOCKER_HOST=tcp://<%=service_node%>.dun.fh:2376",
        "SERVICE_NAME=<%=service_image_name%>",
        "SERVICE_TAGS=<%=service_tag%>",
        "SERVICE_NODE=<%=service_node%>",
        "COMPOSE_PROJECT_NAME=<%=base_service_name%><%=service_tag%>",
        "VERSION=<%=version%>",
        "MIX_ENV=<%=mix_env%>",
        "NODE_ENV=production",
        "FEATURE_TOGGLE_CLIENT_KEY=<%=feature_toggle_client_key%>",
        "SESSION_COOKIE_NAME=<%=session_cookie_name%>",
        "DISABLE_SSR=<%=disable_ssr%>",
        "VAULT_PASS=<%=app_password%>"
    ],
    "version": "test",
    "service_args": null,
    "create_image_extra_args": null,
    "compose_down_args": "--remove-orphans",
    "compose_extra_args": null,
    "command_prefix": null,
    "signal": "USR1",
    "mix_environ": "prod",
    "smoke_port": 3333,
    "service_domain": "service.consul",
    "docker_compose_filename": "docker-compose.yml",
    "santa_environment": "production",
    "slack_channel": "toggle-nose",
    "extra_args": null,
    "flipper_host": "flipper.production.service.dun.fh",
    "service_name": "greatness",
    "service_folder": ".",
    "deploy_hosts": [
        "fh1-mopt01"
    ],
    "service_tag": "black-dev",
    "app_password": "pants"
}