{
    "acceptance_tests": ["Run the acceptance tests"],
    "build": ["Build the docker image"],
    "build_lb": ["Build the load-balancer docker image"],
    "build_minimal_and_emit_schema": ["Extracts the Absinthe schema from API in JSON format"],
    "clean": ["Clean your dev environment"],
    "commits_with_tickets_opt_in": ["Install commit-msg shell file"],
    "configure_alerts": ["Submit alerts"],
    "configure_dashboards": ["Submit dashboards"],
    "configure_proxy": ["Submit service.consul:3333 information"],
    "configure_toggles": ["Submit latest version of toggle file"],
    "deploy": ["Deploy container to node"],
    "deploy_acceptance": ["Deploy Acceptance container"],
    "deploy_integration": ["Deploy Integration container"],
    "deploy_load_balancer_acceptance": ["Deploy the Titan load balancer for acceptance server(s)"],
    "deploy_load_balancer_integration": ["Deploy the Titan load balancer for integration server(s)"],
    "deploy_load_balancer_production": ["Deploy the Titan load balancer for production server(s)"],
    "deploy_production": [""],
    "deploy_testing": ["Deploy testing environment"],
    "for": [""],
    "global.consul.create_key_value_pairs": ["Configure consul with a set of Key/Value pairs"],
    "global.consul.get_service_port": ["Return the current port for the service name and service colour/environment (service tag)"],
    "global.consul.remove_key_value_folder": ["Remove a folder from the KV store"],
    "global.dasher.delete_dashboard": ["Delete the project's dashboards"],
    "global.dasher.publish_dashboard": ["Publish the latest dashboards config to the santa api"],
    "global.deploy.assert_tag_is_live": ["Check if a load balancer is a currently serving the correct live colour"],
    "global.deploy.cleanup_deployed_containers": ["tears down specified containers. Intended to run on deployment failure."],
    "global.deploy.deploy_blue_green": ["Performs a blue-green deployment of a Docker image"],
    "global.deploy.deploy_blue_green_with_cleanup": ["temp task to test cleanup. Will hopefully be merged with deploy_blue_green"],
    "global.deploy.deploy_container": ["Deploys the specified image, shutting down any existing container(s)"],
    "global.deploy.deploy_load_balancer": ["Deploy the service load balancer to deployment server(s)"],
    "global.deploy.generic_deploy_load_balancer": ["Generic task to deploy the load balancer of this service"],
    "global.deploy.graylog_link": ["Provide a link for the last half an hour of logging from <%=base_service_name%>"],
    "global.deploy.it_lives": ["Wait until the live colour is being served via the load balancer"],
    "global.deploy.jackal_consumer": ["Run consumer contract tests, skip if contracts file is missing"],
    "global.deploy.jackal_provider": ["Run provider contract tests, skip if provider is not registered"],
    "global.docker.compose_build": ["Build the system using docker compose"],
    "global.docker.compose_build_no_cache": ["Build the system using docker compose with no cache"],
    "global.docker.compose_down": ["Bring down the system using docker compose"],
    "global.docker.compose_run": ["Bring up the system using docker compose RUN"],
    "global.docker.compose_up": ["Bring up the system using docker compose UP"],
    "global.docker.compose_up_build": ["Bring up the system using docker compose UP"],
    "global.docker.compose_up_detached": ["Bring up the system using docker compose UP"],
    "global.docker.create_image": ["Build the docker image"],
    "global.docker.create_lb_image": ["Build the docker image for the load balancer"],
    "global.docker.kill_containers": ["Kill and remove any active containers"],
    "global.docker.publish_docker_image": ["Build and publish the docker image to the internal repository"],
    "global.docker.pull_image": ["Pull the docker image from the registry"],
    "global.docker.pull_images": ["Pull the docker images from the registry"],
    "global.docker.push_image": ["Push the docker image to our internal repository"],
    "global.domesday.add_key_value": ["Add a secret to the vault with a Github token as credentials"],
    "global.domesday.add_key_value_auth": ["Add a secret to the vault with a usernamre and password as credentials"],
    "global.domesday.get_password": ["Configures the application username and password in Vault and returns the password"],
    "global.domesday.read_key_value": ["Read a secret from the vault with a Github token as credentials"],
    "global.domesday.read_key_value_auth": ["Read a secret from the vault with a usernamre and password as credentials"],
    "global.flipper.upload_toggles": ["Uploads the latest version of a toggle file to flipper"],
    "global.network.check_for_vpn": ["Check for VPN availability"],
    "global.toggle-nose.sniff": ["Error when launch darkly feature toggles are unused"],
    "hot": [""],
    "hot_acceptance": ["Run acceptance tests locally"],
    "hot_min": [""],
    "hot_setup": ["Takes a clean repo and pulls all dependencies"],
    "hot_teardown": ["Brings all docker containers down and prunes stopped containers, dangling volumes, and dangling images"],
    "hot_unit": ["Run containers that watch for changes and rerun unit tests"],
    "hot_unit_min": [""],
    "install_experimental_git_hooks": ["Install experimental pre-push shell file"],
    "install_git_hooks": ["Install pre-push shell file"],
    "install_git_project_settings": ["git specific settings for this project."],
    "jackal_test": ["Run and submit jackal contract tests for Titan API"],
    "local": ["Run container locally"],
    "local_clean": ["Clean your dev environment"],
    "local_debug": [""],
    "local_load_balancer": [""],
    "local_unit": ["Run unit tests inside a container (with automatic build)"],
    "local_unit_nocoverage": ["Run unit tests inside a container (with automatic build)"],
    "local_unit_template": ["Run unit tests inside a container (with automatic build)"],
    "mix_test": ["Just run mix test"],
    "npm_test": ["Just run yarn test"],
    "npm_test_w": ["Just run yarn test watch"],
    "parallel": [""],
    "pre-commit": ["DEPRECATED"],
    "pre_commit": ["Running pre commit tasks"],
    "pre_push": ["Running pre push tasks"],
    "pull": ["Pull the docker image from the registry (to add it to the local cache)"],
    "pull_lb": ["Pull the load-balancer docker image from the registry (to add it to the local cache)"],
    "push": ["Push the docker image to our registry"],
    "push_lb": ["Push the load-balancer docker image to our registry"],
    "sequence": [""],
    "setup": ["Setup your local environment"],
    "setup_if_out_of_date": ["Check that setup is current"],
    "shell": [""],
    "sniff": ["Error when launch darkly feature flags are unused"],
    "unit_test_teamcity": ["Run unit tests inside a container (with automatic build)"],
    "upgrade_tools": ["check tools are at the latest."]
}
